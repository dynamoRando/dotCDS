syntax = "proto3";
import "CDS.proto";
import "google/protobuf/timestamp.proto";
option csharp_namespace = "DotCDS.Common";
package CooperativeSQLService;

// a service for passing cooperative SQL statements to a CDS instance
service CooperativeSQLService {
	rpc IsOnline(CDS.TestRequest) returns (CDS.TestReply);
	rpc CreateUserDatabase(CreateUserDatabaseRequest) returns (CreateUserDatabaseReply);
	rpc ExecuteRead(ExecuteReadRequest) returns (ExecuteReadReply);
	rpc ExecuteWrite(ExecuteWriteRequest) returns (ExecuteWriteReply);
	rpc HasTable(HasTableRequest) returns (HasTableReply);
}

// a message representing the results of a SQL query
message StatementResultset {
	bool isError = 1;
	string resultMessage = 2;
	uint64 numberOfRowsAffected = 3;
	repeated CDS.Row rows = 4;
	string executionErrorMessage = 5;
}


message CreateUserDatabaseRequest {
	CDS.AuthRequest authentication = 1;
	string databaseName = 2;
}

message CreateUserDatabaseReply {
	CDS.AuthResult authenticationResult = 1;
	bool isCreated = 2;
}

message ExecuteReadRequest {
  CDS.AuthRequest authentication = 1;
  string databaseName = 2;
  string sqlStatement = 3;
  uint32 databaseType = 4;
}

message ExecuteReadReply {
	CDS.AuthResult authenticationResult = 1;
	uint64 totalResultsets = 2;
	repeated StatementResultset results = 3;
}

message ExecuteWriteRequest {
  CDS.AuthRequest authentication = 1;
  string databaseName = 2;
  string sqlStatement = 3;
  uint32 databaseType = 4;
}

message ExecuteWriteReply {
	CDS.AuthResult authenticationResult = 1;
	bool isSuccessful = 2;
	uint32 totalRowsAffected = 3;
}

message HasTableRequest{
  CDS.AuthRequest authentication = 1;
  string databaseName = 2;
  string tableName = 3;
  
}

message HasTableReply {
	CDS.AuthResult authenticationResult = 1;
	bool hasTable = 2;
}