syntax = "proto3";
import "CDS.proto";
import "google/protobuf/timestamp.proto";
option csharp_namespace = "DotCDS.Common";
package CooperativeSQLService;

// a service for passing cooperative SQL statements to a CDS instance
service CooperativeSQLService {
	rpc IsOnline(CDS.TestRequest) returns (CDS.TestReply);
	rpc CreateUserDatabase(CreateUserDatabaseRequest) returns (CreateUserDatabaseReply);
	rpc ExecuteRead(ExecuteReadRequest) returns (ExecuteReadReply);
	rpc ExecuteCooperativeRead(ExecuteCooperativeReadRequest) returns (ExecuteCooperativeReadReply);
	rpc ExecuteWrite(ExecuteWriteRequest) returns (ExecuteWriteReply);
	rpc ExecuteCooperativeWrite(ExecuteCooperativeWriteRequest) returns (ExecuteCooperativeWriteReply);
	rpc HasTable(HasTableRequest) returns (HasTableReply);
	rpc SetLogicalStoragePolicy(SetLogicalStoragePolicyRequest) returns (SetLogicalStoragePolicyReply);
	rpc GetLogicalStoragePolicy(GetLogicalStoragePolicyRequest) returns (GetLogicalStoragePolicyReply);
	rpc GenerateContract(ContractRequest) returns (ContractReply);
	rpc AddParticipant(AddParticipantRequest) returns (AddParticipantReply);
	rpc ReviewPendingContracts(ViewPendingContractsRequest) returns (ViewPendingContractsReply);
	rpc AcceptPendingContract(AcceptPendingContractRequest) returns (AcceptPendingContractReply);
	rpc RejectPendingContract(RejectPendingContractRequest) returns (RejectPendingContractReply);
}

// a message representing the results of a SQL query
message StatementResultset {
	bool isError = 1;
	string resultMessage = 2;
	uint64 numberOfRowsAffected = 3;
	repeated CDS.Row rows = 4;
	string executionErrorMessage = 5;
}

message CreateUserDatabaseRequest {
	CDS.AuthRequest authentication = 1;
	string databaseName = 2;
}

message CreateUserDatabaseReply {
	CDS.AuthResult authenticationResult = 1;
	bool isCreated = 2;
}

message ExecuteReadRequest {
  CDS.AuthRequest authentication = 1;
  string databaseName = 2;
  string sqlStatement = 3;
  uint32 databaseType = 4;
}

message ExecuteReadReply {
	CDS.AuthResult authenticationResult = 1;
	uint64 totalResultsets = 2;
	repeated StatementResultset results = 3;
}

message ExecuteWriteRequest {
  CDS.AuthRequest authentication = 1;
  string databaseName = 2;
  string sqlStatement = 3;
  uint32 databaseType = 4;
}

message ExecuteWriteReply {
	CDS.AuthResult authenticationResult = 1;
	bool isSuccessful = 2;
	uint32 totalRowsAffected = 3;
}

message HasTableRequest{
  CDS.AuthRequest authentication = 1;
  string databaseName = 2;
  string tableName = 3;
}

message HasTableReply {
	CDS.AuthResult authenticationResult = 1;
	bool hasTable = 2;
}

message ContractRequest {
	CDS.AuthRequest authentication = 1;
	string hostName = 2;
	string description = 3;
}

message ContractReply {
	CDS.AuthResult authenticationResult = 1;
	bool isSuccessful = 2;
	string errorMessage = 3;
}

message SetLogicalStoragePolicyRequest {
	CDS.AuthRequest authentication = 1;
	string databaseName = 2;
	string tableName = 3;
	uint32 policyMode = 4;
}

message SetLogicalStoragePolicyReply {
	CDS.AuthResult authenticationResult  = 1;
	bool isSuccessful = 2;
	string errorMessage = 3;
}

message GetLogicalStoragePolicyRequest {
	CDS.AuthRequest authentication = 1;
	string databaseName = 2;
	string tableName = 3;
}

message GetLogicalStoragePolicyReply {
	CDS.AuthResult authenticationResult  = 1;
	uint32 policyMode = 2;
}

message ExecuteCooperativeReadRequest {
  CDS.AuthRequest authentication = 1;
  string databaseName = 2;
  string sqlStatement = 3;
  uint32 databaseType = 4;
  string alias = 5;
  string participantId = 6;
}

message ExecuteCooperativeReadReply {
	CDS.AuthResult authenticationResult = 1;
	uint64 totalResultsets = 2;
	repeated StatementResultset results = 3;
}

message ExecuteCooperativeWriteRequest {
  CDS.AuthRequest authentication = 1;
  string databaseName = 2;
  string sqlStatement = 3;
  uint32 databaseType = 4;
  string alias = 5;
  string participantId = 6;
}

message ExecuteCooperativeWriteReply {
	CDS.AuthResult authenticationResult = 1;
	bool isSuccessful = 2;
	uint32 totalRowsAffected = 3;
}

message AddParticipantRequest{
	CDS.AuthRequest authentication = 1;
	string databaseName = 2;
	string alias = 3;
	string ip4Address = 4;
	uint32 port = 5;
}

message AddParticipantReply{
	CDS.AuthResult authenticationResult = 1;
	bool isSuccessful = 2;
	string errorMessage = 3;
}

message ViewPendingContractsRequest{
	CDS.AuthRequest authentication = 1;
}

message ViewPendingContractsReply{
	CDS.AuthResult authenticationResult = 1;
	repeated CDS.Contract contracts = 2;
}

message AcceptPendingContractRequest {
	CDS.AuthRequest authentication = 1;
	string hostAlias = 2;
}

message AcceptPendingContractReply {
	CDS.AuthResult authenticationResult = 1;
}

message RejectPendingContractRequest {
	CDS.AuthRequest authentication = 1;
	string hostAlias = 2;
}

message RejectPendingContractReply {
	CDS.AuthResult authenticationResult = 1;
}